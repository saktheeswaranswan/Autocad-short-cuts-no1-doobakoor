let points = [];
let currentSegment = 0;
let t = 0;
const duration = 2000;
let lastMillis;
let pathPoints = [];
const maxPathLength = 500;
let blinkStart = 0;
const blinkDuration = 500;
let isBlinking = false;

const unitRange = 50;
const unitSize = 4;
let shapeButtons = [];

const polygonNames = {
  3: "Triangle",
  4: "Square",
  5: "Pentagon",
  6: "Hexagon",
  7: "Heptagon",
  8: "Octagon",
  9: "Nonagon",
  10: "Decagon",
  11: "Hendecagon",
  12: "Dodecagon",
  13: "Tridecagon",
  14: "Tetradecagon",
  15: "Pentadecagon",
  16: "Hexadecagon",
  17: "Heptadecagon",
  18: "Octadecagon",
  19: "Enneadecagon",
  20: "Icosagon"
};

function setup() {
  createCanvas(500, 500);
  angleMode(RADIANS);
  createShapeButtons();
  setPolygon(6); // Default: Hexagon
  lastMillis = millis();
}

function draw() {
  const now = millis();
  let delta = now - lastMillis;
  t += delta / duration;
  if (t >= 1) {
    t = 0;
    currentSegment = (currentSegment + 1) % points.length;
    blinkStart = now;
    isBlinking = true;
  }
  lastMillis = now;

  const segStart = points[currentSegment];
  const segEnd = points[(currentSegment + 1) % points.length];
  const pos = p5.Vector.lerp(segStart, segEnd, t);

  background(255);
  drawGrid();
  drawPath(pos);
  drawAxes(pos, segStart, now);
  drawPolygonLabel();
}

function createShapeButtons() {
  let x = 10;
  let y = 10;
  for (let sides = 3; sides <= 20; sides++) {
    const label = polygonNames[sides] || `${sides}-gon`;
    let btn = createButton(label);
    btn.position(x, y);
    btn.mousePressed(() => setPolygon(sides));
    shapeButtons.push(btn);

    y += 30;
    if (y > 450) {
      y = 10;
      x += 110;
    }
  }
}

function setPolygon(sides) {
  const radius = unitRange;
  points = [];
  for (let i = 0; i < sides; i++) {
    let angle = TWO_PI / sides * i - PI / 2;
    points.push(createVector(radius * cos(angle), radius * sin(angle)));
  }
  currentSegment = 0;
  t = 0;
  pathPoints = [];
  blinkStart = millis();
  isBlinking = true;
}

function drawGrid() {
  stroke(220);
  strokeWeight(1);
  for (let i = -unitRange; i <= unitRange; i++) {
    let x = width / 2 + i * unitSize;
    line(x, 0, x, height);
    let y = height / 2 + i * unitSize;
    line(0, y, width, y);
  }
}

function drawPath(pos) {
  pathPoints.push(pos.copy());
  if (pathPoints.length > maxPathLength) {
    pathPoints.shift();
  }

  stroke(255, 0, 0);
  strokeWeight(2);
  for (let i = 1; i < pathPoints.length; i++) {
    let p0 = pathPoints[i - 1];
    let p1 = pathPoints[i];
    line(
      width / 2 + p0.x * unitSize,
      height / 2 + p0.y * unitSize,
      width / 2 + p1.x * unitSize,
      height / 2 + p1.y * unitSize
    );
  }
}

function drawAxes(pos, segStart, now) {
  const blinking = isBlinking && (now - blinkStart < blinkDuration);
  if (!blinking) isBlinking = false;

  stroke(blinking ? color(255, 0, 0) : 0);
  strokeWeight(1);
  push();
  translate(width / 2 + pos.x * unitSize, height / 2 + pos.y * unitSize);
  line(-unitRange * unitSize, 0, unitRange * unitSize, 0);
  line(0, -unitRange * unitSize, 0, unitRange * unitSize);

  noStroke();
  fill(blinking ? color(255, 0, 0) : 0);
  textAlign(CENTER, CENTER);
  textSize(12);
  text(`-X`, -unitRange * unitSize, -10);
  text(`+X`, unitRange * unitSize, -10);
  text(`+Y`, -10, -unitRange * unitSize);
  text(`-Y`, -10, unitRange * unitSize);

  text(`(${segStart.x.toFixed(0)}, ${segStart.y.toFixed(0)})`, 0, -20);
  pop();
}

function drawPolygonLabel() {
  fill(0);
  noStroke();
  textAlign(LEFT, TOP);
  textSize(16);
  let name = polygonNames[points.length] || `${points.length}-gon`;
  text(`Polygon: ${name}`, 10, height - 30);
}


























$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$






let points = [];
let currentSegment = 0;
let t = 0;
const duration = 2000;
let lastMillis;
let pathPoints = [];
const maxPathLength = 500;
let blinkStart = 0;
const blinkDuration = 500;
let isBlinking = false;

const unitRange = 50;
const unitSize = 4;
let shapeButtons = [];

const polygonNames = {
  3: "Triangle",
  4: "Square",
  5: "Pentagon",
  6: "Hexagon",
  7: "Heptagon",
  8: "Octagon",
  9: "Nonagon",
  10: "Decagon",
  11: "Hendecagon",
  12: "Dodecagon",
  13: "Tridecagon",
  14: "Tetradecagon",
  15: "Pentadecagon",
  16: "Hexadecagon",
  17: "Heptadecagon",
  18: "Octadecagon",
  19: "Enneadecagon",
  20: "Icosagon"
};

function setup() {
  createCanvas(500, 500);
  angleMode(RADIANS);
  createShapeButtons();
  setPolygon(6); // Default: Hexagon
  lastMillis = millis();
}

function draw() {
  const now = millis();
  let delta = now - lastMillis;
  t += delta / duration;
  if (t >= 1) {
    t = 0;
    currentSegment = (currentSegment + 1) % points.length;
    blinkStart = now;
    isBlinking = true;
  }
  lastMillis = now;

  const segStart = points[currentSegment];
  const segEnd = points[(currentSegment + 1) % points.length];
  const pos = p5.Vector.lerp(segStart, segEnd, t);

  background(255);
  drawGrid();
  drawPath(pos);
  drawAxes(pos, segStart, now);
  drawPolygonLabel();
}

function createShapeButtons() {
  let x = 10;
  let y = 10;
  for (let sides = 3; sides <= 20; sides++) {
    const label = polygonNames[sides] || `${sides}-gon`;
    let btn = createButton(label);
    btn.position(x, y);
    btn.mousePressed(() => setPolygon(sides));
    shapeButtons.push(btn);

    y += 30;
    if (y > 450) {
      y = 10;
      x += 110;
    }
  }
}

function setPolygon(sides) {
  const radius = unitRange;
  points = [];
  for (let i = 0; i < sides; i++) {
    let angle = TWO_PI / sides * i - PI / 2;
    points.push(createVector(radius * cos(angle), radius * sin(angle)));
  }
  currentSegment = 0;
  t = 0;
  pathPoints = [];
  blinkStart = millis();
  isBlinking = true;
}

function drawGrid() {
  stroke(220);
  strokeWeight(1);
  for (let i = -unitRange; i <= unitRange; i++) {
    let x = width / 2 + i * unitSize;
    line(x, 0, x, height);
    let y = height / 2 + i * unitSize;
    line(0, y, width, y);
  }
}

function drawPath(pos) {
  pathPoints.push(pos.copy());
  if (pathPoints.length > maxPathLength) {
    pathPoints.shift();
  }

  stroke(255, 0, 0);
  strokeWeight(2);
  for (let i = 1; i < pathPoints.length; i++) {
    let p0 = pathPoints[i - 1];
    let p1 = pathPoints[i];
    line(
      width / 2 + p0.x * unitSize,
      height / 2 + p0.y * unitSize,
      width / 2 + p1.x * unitSize,
      height / 2 + p1.y * unitSize
    );
  }
}

function drawAxes(pos, segStart, now) {
  const blinking = isBlinking && (now - blinkStart < blinkDuration);
  if (!blinking) isBlinking = false;

  stroke(blinking ? color(255, 0, 0) : 0);
  strokeWeight(1);
  push();
  translate(width / 2 + pos.x * unitSize, height / 2 + pos.y * unitSize);
  line(-unitRange * unitSize, 0, unitRange * unitSize, 0);
  line(0, -unitRange * unitSize, 0, unitRange * unitSize);

  noStroke();
  fill(blinking ? color(255, 0, 0) : 0);
  textAlign(CENTER, CENTER);
  textSize(12);
  text(`-X`, -unitRange * unitSize, -10);
  text(`+X`, unitRange * unitSize, -10);
  text(`+Y`, -10, -unitRange * unitSize);
  text(`-Y`, -10, unitRange * unitSize);

  text(`(${segStart.x.toFixed(0)}, ${segStart.y.toFixed(0)})`, 0, -20);
  pop();
}

function drawPolygonLabel() {
  fill(0);
  noStroke();
  textAlign(LEFT, TOP);
  textSize(16);
  let name = polygonNames[points.length] || `${points.length}-gon`;
  text(`Polygon: ${name}`, 10, height - 30);
}
