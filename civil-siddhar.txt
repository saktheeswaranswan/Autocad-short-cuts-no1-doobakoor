let points = [
  [-15.00621, 29.20372],
  [-23.85673, 58.13813],
  [-23.68653, 66.13765],
  [-26.23957, 65.79724],
  [-25.89916, 47.75579]
];

let labels = ['A', 'B', 'C', 'D', 'E'];
let fontSizeSlider;

function setup() {
  createCanvas(595, 842);
  background(255);
  noLoop();

  // Slider for label font size
  fontSizeSlider = createSlider(4, 14, 6, 1);
  fontSizeSlider.position(20, height + 10); // Place below the canvas
}

function draw() {
  background(255);

  let scaleFactor = 5;
  let offsetVal = 1;
  let arrowHeadLength = 10;
  let arrowHeadWidth = arrowHeadLength / 3;

  let areaSqM = polygonArea(points);
  let areaCents = areaSqM / 40.4686;

  let centroid = createVector(0, 0);
  for (let pt of points) {
    centroid.add(createVector(pt[0], pt[1]));
  }
  centroid.div(points.length);

  push();
    translate(width / 2, height / 2);
    scale(scaleFactor, -scaleFactor);

    stroke(0);
    strokeWeight(1 / scaleFactor);
    fill(173, 216, 230, 150);
    beginShape();
    for (let pt of points) {
      vertex(pt[0], pt[1]);
    }
    endShape(CLOSE);

    noStroke();
    fill(0);
    for (let i = 0; i < points.length; i++) {
      let [x, y] = points[i];
      ellipse(x, y, 5 / scaleFactor, 5 / scaleFactor);

      push();
        translate(x, y);
        scale(1, -1);
        textFont("Arial");
        textStyle(NORMAL);
        textSize(fontSizeSlider.value());
        textAlign(CENTER, BOTTOM);
        text(labels[i], 0, -3 / scaleFactor);
      pop();
    }
  pop();

  for (let i = 0; i < points.length; i++) {
    let p1 = createVector(points[i][0], points[i][1]);
    let p2 = createVector(points[(i + 1) % points.length][0], points[(i + 1) % points.length][1]);
    let d = p5.Vector.dist(p1, p2);

    let mid = p5.Vector.add(p1, p2).mult(0.5);
    let edgeDir = p5.Vector.sub(p2, p1);
    let candidateNormal = createVector(-edgeDir.y, edgeDir.x);
    candidateNormal.normalize();

    let toCentroid = p5.Vector.sub(centroid, mid);
    if (candidateNormal.dot(toCentroid) > 0) {
      candidateNormal.mult(-1);
    }

    let offset = p5.Vector.mult(candidateNormal, offsetVal);
    let p1Dim = p5.Vector.add(p1, offset);
    let p2Dim = p5.Vector.add(p2, offset);

    let p1Screen = toScreen(p1Dim, scaleFactor);
    let p2Screen = toScreen(p2Dim, scaleFactor);

    stroke(0);
    strokeWeight(1);
    line(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);

    let dimDir = p5.Vector.sub(p2Screen, p1Screen);
    dimDir.normalize();
    drawArrowHead(p1Screen, dimDir, arrowHeadLength, arrowHeadWidth);
    drawArrowHead(p2Screen, p5.Vector.mult(dimDir, -1), arrowHeadLength, arrowHeadWidth);

    let dimMid = p5.Vector.add(p1Screen, p2Screen).mult(0.5);
    push();
      textFont("Arial");
      textStyle(NORMAL);
      textSize(12);
      textAlign(CENTER, CENTER);
      text(nf(d, 1, 1) + " m", dimMid.x, dimMid.y - 15); // ✅ Fixed here
    pop();
  }

  fill(255, 0, 0);
  noStroke();
  textFont("Arial");
  textStyle(NORMAL);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Area: " + nf(areaSqM, 1, 2) + " m²", 20, 20);     // ✅ Fixed
  text(" = " + nf(areaCents, 1, 2) + " cents", 20, 40);   // ✅ Fixed
}

function toScreen(pt, scaleFactor) {
  return createVector(width / 2 + pt.x * scaleFactor, height / 2 - pt.y * scaleFactor);
}

function drawArrowHead(pt, dir, arrowHeadLength, arrowHeadWidth) {
  let base = p5.Vector.sub(pt, p5.Vector.mult(dir, arrowHeadLength));
  let perp = createVector(-dir.y, dir.x);
  perp.setMag(arrowHeadWidth / 2);

  let corner1 = p5.Vector.add(base, perp);
  let corner2 = p5.Vector.sub(base, perp);

  fill(0);
  noStroke();
  triangle(pt.x, pt.y, corner1.x, corner1.y, corner2.x, corner2.y);
}

function polygonArea(pts) {
  let area = 0;
  for (let i = 0; i < pts.length; i++) {
    let [x1, y1] = pts[i];
    let [x2, y2] = pts[(i + 1) % pts.length];
    area += (x1 * y2 - x2 * y1);
  }
  return abs(area) / 2;
}
