let points = [
  [0.449, -0.348],
  [23.0, 28.6],
  [-7.85, 70.7],
  [-29.9, 56.3],
  [-30.1, 49.4],
  [-18.8, 24.5]
];
// Vertex labels.
let labels = ['A', 'B', 'C', 'D', 'E', 'F'];

function setup() {
  // Create an A4 canvas (595 x 842 pixels)
  createCanvas(595, 842);
  background(255);
  noLoop();
}

function draw() {
  background(255);

  // Define drawing parameters.
  let scaleFactor = 5;         // Scale: 1 unit = 5 pixels.
  let offsetVal = 1;           // Offset (in logical units) for the dimension lines.
  let arrowHeadLength = 10;    // Arrow head length in pixels.
  let arrowHeadWidth = arrowHeadLength / 3; // Arrow head width (1:3 proportion).

  // Calculate polygon area (in m²) using the shoelace formula.
  let areaSqM = polygonArea(points);
  let areaCents = areaSqM / 40.4686; // 1 cent = 40.4686 m².
  
  // Compute the polygon centroid (logical coordinates) for determining "outside".
  let centroid = createVector(0, 0);
  for (let pt of points) {
    centroid.add(createVector(pt[0], pt[1]));
  }
  centroid.div(points.length);
  
  // --- Draw the polygon and vertex labels ---
  push();
    // Transform to "logical" coordinate system:
    // Center drawing on canvas and flip y so that positive y is upward.
    translate(width / 2, height / 2);
    scale(scaleFactor, -scaleFactor);
  
    // Draw the polygon.
    stroke(0);
    strokeWeight(1 / scaleFactor);
    fill(173, 216, 230, 150);
    beginShape();
      for (let pt of points) {
        vertex(pt[0], pt[1]);
      }
    endShape(CLOSE);
    
    // Draw vertices and label them with thin, neat (tiny) fonts.
    noStroke();
    fill(0);
    for (let i = 0; i < points.length; i++) {
      let [x, y] = points[i];
      // Small circle at vertex.
      ellipse(x, y, 5 / scaleFactor, 5 / scaleFactor);
      
      push();
        translate(x, y);
        // Invert the y-axis for text so it appears right-side-up.
        scale(1, -1);
        textFont("Arial");
        textStyle(NORMAL);
        textSize(8);
        textAlign(CENTER, BOTTOM);
        text(labels[i], 0, -3 / scaleFactor);
      pop();
    }
  pop();
  
  // --- Draw dimension lines on each edge ---
  // (Dimension lines are drawn in screen coordinates for crisp rendering.)
  for (let i = 0; i < points.length; i++) {
    let p1 = createVector(points[i][0], points[i][1]);
    let p2 = createVector(points[(i + 1) % points.length][0], points[(i + 1) % points.length][1]);
    let d = p5.Vector.dist(p1, p2); // Edge length in meters.
    
    // Compute the edge midpoint (logical coordinates).
    let mid = p5.Vector.add(p1, p2).mult(0.5);
    
    // Determine a candidate normal (perpendicular) vector for the edge.
    let edgeDir = p5.Vector.sub(p2, p1);
    let candidateNormal = createVector(-edgeDir.y, edgeDir.x);
    candidateNormal.normalize();
    
    // Reverse the normal if needed so that it points outward from the polygon.
    let toCentroid = p5.Vector.sub(centroid, mid);
    if (candidateNormal.dot(toCentroid) > 0) {
      candidateNormal.mult(-1);
    }
    
    // Offset vector in logical coordinates.
    let offset = p5.Vector.mult(candidateNormal, offsetVal);
    
    // Calculate the endpoints of the dimension line (logical coordinates).
    let p1Dim = p5.Vector.add(p1, offset);
    let p2Dim = p5.Vector.add(p2, offset);
    
    // Convert logical coordinates to screen coordinates.
    let p1Screen = toScreen(p1Dim, scaleFactor);
    let p2Screen = toScreen(p2Dim, scaleFactor);
    
    // Draw the dimension line (thin and neat).
    stroke(0);
    strokeWeight(1);
    line(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);
    
    // Draw arrowheads at each end of the dimension line.
    let dimDir = p5.Vector.sub(p2Screen, p1Screen);
    dimDir.normalize();
    drawArrowHead(p1Screen, dimDir, arrowHeadLength, arrowHeadWidth);
    drawArrowHead(p2Screen, p5.Vector.mult(dimDir, -1), arrowHeadLength, arrowHeadWidth);
    
    // Draw the dimension text at the midpoint of the dimension line.
    let dimMid = p5.Vector.add(p1Screen, p2Screen).mult(0.5);
    push();
      textFont("Arial");
      textStyle(NORMAL);
      textSize(12);
      textAlign(CENTER, CENTER);
      // Render the length in meters (with one decimal).
      text(nfc(d, 1, 1) + " m", dimMid.x, dimMid.y - 15);
    pop();
  }
  
  // --- Draw the area information ---
  fill(255, 0, 0);
  noStroke();
  textFont("Arial");
  textStyle(NORMAL);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Area: " + nfc(areaSqM, 2) + " m²", 20, 20);
  text(" = " + nfc(areaCents, 2) + " cents", 20, 40);
}

// --- Utility functions ---

// Converts a point from logical coordinates to screen coordinates.
function toScreen(pt, scaleFactor) {
  // Screen conversion:
  // x_screen = width/2 + pt.x * scaleFactor
  // y_screen = height/2 - pt.y * scaleFactor
  return createVector(width/2 + pt.x * scaleFactor, height/2 - pt.y * scaleFactor);
}

// Draws an arrowhead as a filled triangle at a given point on the screen.
// 'pt' is the tip location, 'dir' is the normalized direction vector.
function drawArrowHead(pt, dir, arrowHeadLength, arrowHeadWidth) {
  // Calculate the base of the arrowhead.
  let base = p5.Vector.sub(pt, p5.Vector.mult(dir, arrowHeadLength));
  // Calculate a perpendicular vector.
  let perp = createVector(-dir.y, dir.x);
  perp.setMag(arrowHeadWidth / 2);
  
  // Determine the two base corners.
  let corner1 = p5.Vector.add(base, perp);
  let corner2 = p5.Vector.sub(base, perp);
  
  fill(0);
  noStroke();
  triangle(pt.x, pt.y, corner1.x, corner1.y, corner2.x, corner2.y);
}

// Computes the polygon area using the shoelace formula.
function polygonArea(pts) {
  let area = 0;
  for (let i = 0; i < pts.length; i++) {
    let [x1, y1] = pts[i];
    let [x2, y2] = pts[(i + 1) % pts.length];
    area += (x1 * y2 - x2 * y1);
  }
  return abs(area) / 2;
}














// New coordinates (converted from scientific notation):
// -3.139317E1	5.565349E1  -> [-31.39317, 55.65349]
// -3.025913E1	5.532948E1  -> [-30.25913, 55.32948]
// -2.985411E1	4.925426E1  -> [-29.85411, 49.25426]
// -1.924273E1	2.681645E1  -> [-19.24273, 26.81645]
// -3.009712E1	3.945291E1  -> [-30.09712, 39.45291]
// -3.179819E1	5.524848E1  -> [-31.79819, 55.24848]
let points = [
  [-31.39317, 55.65349],
  [-30.25913, 55.32948],
  [-29.85411, 49.25426],
  [-19.24273, 26.81645],
  [-30.09712, 39.45291],
  [-31.79819, 55.24848]
];
// Vertex labels.
let labels = ['A', 'B', 'C', 'D', 'E', 'F'];

function setup() {
  // Create an A4 canvas (595 x 842 pixels)
  createCanvas(595, 842);
  background(255);
  noLoop();
}

function draw() {
  background(255);

  // Define drawing parameters.
  let scaleFactor = 5;         // Scale: 1 logical unit = 5 pixels.
  let offsetVal = 1;           // Offset (in logical units) for the dimension lines.
  let arrowHeadLength = 10;    // Arrow head length in pixels.
  let arrowHeadWidth = arrowHeadLength / 3; // Arrow head width (1:3 proportion).

  // Calculate polygon area (in m²) using the shoelace formula.
  let areaSqM = polygonArea(points);
  let areaCents = areaSqM / 40.4686; // 1 cent = 40.4686 m².
  
  // Compute the polygon centroid (logical coordinates) for determining the "outside" direction.
  let centroid = createVector(0, 0);
  for (let pt of points) {
    centroid.add(createVector(pt[0], pt[1]));
  }
  centroid.div(points.length);
  
  // --- Draw the polygon and vertex labels ---
  push();
    // Transform to "logical" coordinates: center on canvas and flip y so positive y is upward.
    translate(width / 2, height / 2);
    scale(scaleFactor, -scaleFactor);
  
    // Draw the polygon.
    stroke(0);
    strokeWeight(1 / scaleFactor);
    fill(173, 216, 230, 150);
    beginShape();
      for (let pt of points) {
        vertex(pt[0], pt[1]);
      }
    endShape(CLOSE);
    
    // Draw vertices and label them with thin, neat (small) fonts.
    noStroke();
    fill(0);
    for (let i = 0; i < points.length; i++) {
      let [x, y] = points[i];
      // Draw a small circle at the vertex.
      ellipse(x, y, 5 / scaleFactor, 5 / scaleFactor);
      
      push();
        translate(x, y);
        // Flip back the y-axis for correct text orientation.
        scale(1, -1);
        textFont("Arial");
        textStyle(NORMAL);
        textSize(8);
        textAlign(CENTER, BOTTOM);
        text(labels[i], 0, -3 / scaleFactor);
      pop();
    }
  pop();
  
  // --- Draw dimension lines on each edge ---
  // (Dimension lines are drawn in screen coordinates for crisp rendering.)
  for (let i = 0; i < points.length; i++) {
    let p1 = createVector(points[i][0], points[i][1]);
    let p2 = createVector(points[(i + 1) % points.length][0], points[(i + 1) % points.length][1]);
    let d = p5.Vector.dist(p1, p2); // Edge length in meters.
    
    // Compute the edge midpoint (logical coordinates).
    let mid = p5.Vector.add(p1, p2).mult(0.5);
    
    // Compute a candidate normal (perpendicular) vector.
    let edgeDir = p5.Vector.sub(p2, p1);
    let candidateNormal = createVector(-edgeDir.y, edgeDir.x);
    candidateNormal.normalize();
    
    // Ensure the normal points outward from the polygon.
    let toCentroid = p5.Vector.sub(centroid, mid);
    if (candidateNormal.dot(toCentroid) > 0) {
      candidateNormal.mult(-1);
    }
    
    // Create an offset vector (logical coordinates) for the dimension line.
    let offset = p5.Vector.mult(candidateNormal, offsetVal);
    
    // Calculate the endpoints of the dimension line (logical coordinates).
    let p1Dim = p5.Vector.add(p1, offset);
    let p2Dim = p5.Vector.add(p2, offset);
    
    // Convert these endpoints to screen coordinates.
    let p1Screen = toScreen(p1Dim, scaleFactor);
    let p2Screen = toScreen(p2Dim, scaleFactor);
    
    // Draw the dimension line (thin and neat).
    stroke(0);
    strokeWeight(1);
    line(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);
    
    // Draw arrowheads at both ends of the dimension line.
    let dimDir = p5.Vector.sub(p2Screen, p1Screen);
    dimDir.normalize();
    drawArrowHead(p1Screen, dimDir, arrowHeadLength, arrowHeadWidth);
    drawArrowHead(p2Screen, p5.Vector.mult(dimDir, -1), arrowHeadLength, arrowHeadWidth);
    
    // Draw the dimension text (edge length) near the midpoint of the dimension line.
    let dimMid = p5.Vector.add(p1Screen, p2Screen).mult(0.5);
    push();
      textFont("Arial");
      textStyle(NORMAL);
      textSize(12);
      textAlign(CENTER, CENTER);
      text(nfc(d, 1, 1) + " m", dimMid.x, dimMid.y - 15);
    pop();
  }
  
  // --- Draw the area information ---
  fill(255, 0, 0);
  noStroke();
  textFont("Arial");
  textStyle(NORMAL);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Area: " + nfc(areaSqM, 2) + " m²", 20, 20);
  text(" = " + nfc(areaCents, 2) + " cents", 20, 40);
}

// --- Utility functions ---

// Converts a point from logical coordinates to screen coordinates.
function toScreen(pt, scaleFactor) {
  // Conversion:
  // x_screen = width/2 + pt.x * scaleFactor
  // y_screen = height/2 - pt.y * scaleFactor
  return createVector(width / 2 + pt.x * scaleFactor, height / 2 - pt.y * scaleFactor);
}

// Draws an arrowhead as a filled triangle at a given point on the screen.
// 'pt' is the tip location, and 'dir' is a normalized direction vector.
function drawArrowHead(pt, dir, arrowHeadLength, arrowHeadWidth) {
  let base = p5.Vector.sub(pt, p5.Vector.mult(dir, arrowHeadLength));
  let perp = createVector(-dir.y, dir.x);
  perp.setMag(arrowHeadWidth / 2);
  
  let corner1 = p5.Vector.add(base, perp);
  let corner2 = p5.Vector.sub(base, perp);
  
  fill(0);
  noStroke();
  triangle(pt.x, pt.y, corner1.x, corner1.y, corner2.x, corner2.y);
}

// Computes the polygon area using the shoelace formula.
function polygonArea(pts) {
  let area = 0;
  for (let i = 0; i < pts.length; i++) {
    let [x1, y1] = pts[i];
    let [x2, y2] = pts[(i + 1) % pts.length];
    area += (x1 * y2 - x2 * y1);
  }
  return abs(area) / 2;
}








// New triangle coordinates (interpreting scientific notation)
// -3.077685E1   5.765595E1   --> [-30.77685, 57.65595]
// -9.535331E0   7.062787E1   --> [ -9.535331, 70.62787]
// -3.207404E1   6.787134E1   --> [-32.07404, 67.87134]
let points = [
  [-30.77685, 57.65595],
  [-9.535331, 70.62787],
  [-32.07404, 67.87134]
];
// Update vertex labels for three points.
let labels = ['A', 'B', 'C'];

function setup() {
  // Create an A4 canvas (595 x 842 pixels)
  createCanvas(595, 842);
  background(255);
  noLoop();
}

function draw() {
  background(255);

  // Define drawing parameters.
  let scaleFactor = 5;         // Scale: 1 unit = 5 pixels.
  let offsetVal = 1;           // Offset (in logical units) for the dimension lines.
  let arrowHeadLength = 10;    // Arrow head length in pixels.
  let arrowHeadWidth = arrowHeadLength / 3; // Arrow head width (1:3 proportion).

  // Calculate polygon area (in m²) using the shoelace formula.
  let areaSqM = polygonArea(points);
  let areaCents = areaSqM / 40.4686; // 1 cent = 40.4686 m².
  
  // Compute the polygon centroid (logical coordinates) for determining "outside".
  let centroid = createVector(0, 0);
  for (let pt of points) {
    centroid.add(createVector(pt[0], pt[1]));
  }
  centroid.div(points.length);
  
  // --- Draw the polygon and vertex labels ---
  push();
    // Transform to "logical" coordinate system:
    // Center drawing on canvas and flip y so that positive y is upward.
    translate(width / 2, height / 2);
    scale(scaleFactor, -scaleFactor);
  
    // Draw the polygon.
    stroke(0);
    strokeWeight(1 / scaleFactor);
    fill(173, 216, 230, 150);
    beginShape();
      for (let pt of points) {
        vertex(pt[0], pt[1]);
      }
    endShape(CLOSE);
    
    // Draw vertices and label them with thin, neat (tiny) fonts.
    noStroke();
    fill(0);
    for (let i = 0; i < points.length; i++) {
      let [x, y] = points[i];
      // Small circle at vertex.
      ellipse(x, y, 5 / scaleFactor, 5 / scaleFactor);
      
      push();
        translate(x, y);
        // Invert the y-axis for text so it appears right-side-up.
        scale(1, -1);
        textFont("Arial");
        textStyle(NORMAL);
        textSize(8);
        textAlign(CENTER, BOTTOM);
        text(labels[i], 0, -3 / scaleFactor);
      pop();
    }
  pop();
  
  // --- Draw dimension lines on each edge ---
  // (Dimension lines are drawn in screen coordinates for crisp rendering.)
  for (let i = 0; i < points.length; i++) {
    let p1 = createVector(points[i][0], points[i][1]);
    let p2 = createVector(points[(i + 1) % points.length][0], points[(i + 1) % points.length][1]);
    let d = p5.Vector.dist(p1, p2); // Edge length in meters.
    
    // Compute the edge midpoint (logical coordinates).
    let mid = p5.Vector.add(p1, p2).mult(0.5);
    
    // Determine a candidate normal (perpendicular) vector for the edge.
    let edgeDir = p5.Vector.sub(p2, p1);
    let candidateNormal = createVector(-edgeDir.y, edgeDir.x);
    candidateNormal.normalize();
    
    // Reverse the normal if needed so that it points outward from the polygon.
    let toCentroid = p5.Vector.sub(centroid, mid);
    if (candidateNormal.dot(toCentroid) > 0) {
      candidateNormal.mult(-1);
    }
    
    // Offset vector in logical coordinates.
    let offset = p5.Vector.mult(candidateNormal, offsetVal);
    
    // Calculate the endpoints of the dimension line (logical coordinates).
    let p1Dim = p5.Vector.add(p1, offset);
    let p2Dim = p5.Vector.add(p2, offset);
    
    // Convert logical coordinates to screen coordinates.
    let p1Screen = toScreen(p1Dim, scaleFactor);
    let p2Screen = toScreen(p2Dim, scaleFactor);
    
    // Draw the dimension line (thin and neat).
    stroke(0);
    strokeWeight(1);
    line(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);
    
    // Draw arrowheads at each end of the dimension line.
    let dimDir = p5.Vector.sub(p2Screen, p1Screen);
    dimDir.normalize();
    drawArrowHead(p1Screen, dimDir, arrowHeadLength, arrowHeadWidth);
    drawArrowHead(p2Screen, p5.Vector.mult(dimDir, -1), arrowHeadLength, arrowHeadWidth);
    
    // Draw the dimension text at the midpoint of the dimension line.
    let dimMid = p5.Vector.add(p1Screen, p2Screen).mult(0.5);
    push();
      textFont("Arial");
      textStyle(NORMAL);
      textSize(12);
      textAlign(CENTER, CENTER);
      // Render the length in meters (with one decimal).
      text(nfc(d, 1, 1) + " m", dimMid.x, dimMid.y - 15);
    pop();
  }
  
  // --- Draw the area information ---
  fill(255, 0, 0);
  noStroke();
  textFont("Arial");
  textStyle(NORMAL);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Area: " + nfc(areaSqM, 2) + " m²", 20, 20);
  text(" = " + nfc(areaCents, 2) + " cents", 20, 40);
}

// --- Utility functions ---

// Converts a point from logical coordinates to screen coordinates.
function toScreen(pt, scaleFactor) {
  // Screen conversion:
  // x_screen = width/2 + pt.x * scaleFactor
  // y_screen = height/2 - pt.y * scaleFactor
  return createVector(width / 2 + pt.x * scaleFactor, height / 2 - pt.y * scaleFactor);
}

// Draws an arrowhead as a filled triangle at a given point on the screen.
// 'pt' is the tip location, 'dir' is the normalized direction vector.
function drawArrowHead(pt, dir, arrowHeadLength, arrowHeadWidth) {
  // Calculate the base of the arrowhead.
  let base = p5.Vector.sub(pt, p5.Vector.mult(dir, arrowHeadLength));
  // Calculate a perpendicular vector.
  let perp = createVector(-dir.y, dir.x);
  perp.setMag(arrowHeadWidth / 2);
  
  // Determine the two base corners.
  let corner1 = p5.Vector.add(base, perp);
  let corner2 = p5.Vector.sub(base, perp);
  
  fill(0);
  noStroke();
  triangle(pt.x, pt.y, corner1.x, corner1.y, corner2.x, corner2.y);
}

// Computes the polygon area using the shoelace formula.
function polygonArea(pts) {
  let area = 0;
  for (let i = 0; i < pts.length; i++) {
    let [x1, y1] = pts[i];
    let [x2, y2] = pts[(i + 1) % pts.length];
    area += (x1 * y2 - x2 * y1);
  }
  return abs(area) / 2;
}
















// New coordinates (converted from scientific notation):
// -3.139317E1	5.565349E1  -> [-31.39317, 55.65349]
// -3.025913E1	5.532948E1  -> [-30.25913, 55.32948]
// -2.985411E1	4.925426E1  -> [-29.85411, 49.25426]
// -1.924273E1	2.681645E1  -> [-19.24273, 26.81645]
// -3.009712E1	3.945291E1  -> [-30.09712, 39.45291]
// -3.179819E1	5.524848E1  -> [-31.79819, 55.24848]
let points = [
  [-31.39317, 55.65349],
  [-30.25913, 55.32948],
  [-29.85411, 49.25426],
  [-19.24273, 26.81645],
  [-30.09712, 39.45291],
  [-31.79819, 55.24848]
];
// Vertex labels.
let labels = ['A', 'B', 'C', 'D', 'E', 'F'];

function setup() {
  // Create an A4 canvas (595 x 842 pixels)
  createCanvas(595, 842);
  background(255);
  noLoop();
}

function draw() {
  background(255);

  // Define drawing parameters.
  let scaleFactor = 5;         // Scale: 1 logical unit = 5 pixels.
  let offsetVal = 1;           // Offset (in logical units) for the dimension lines.
  let arrowHeadLength = 10;    // Arrow head length in pixels.
  let arrowHeadWidth = arrowHeadLength / 3; // Arrow head width (1:3 proportion).

  // Calculate polygon area (in m²) using the shoelace formula.
  let areaSqM = polygonArea(points);
  let areaCents = areaSqM / 40.4686; // 1 cent = 40.4686 m².
  
  // Compute the polygon centroid (logical coordinates) for determining the "outside" direction.
  let centroid = createVector(0, 0);
  for (let pt of points) {
    centroid.add(createVector(pt[0], pt[1]));
  }
  centroid.div(points.length);
  
  // --- Draw the polygon and vertex labels ---
  push();
    // Transform to "logical" coordinates: center on canvas and flip y so positive y is upward.
    translate(width / 2, height / 2);
    scale(scaleFactor, -scaleFactor);
  
    // Draw the polygon.
    stroke(0);
    strokeWeight(1 / scaleFactor);
    fill(173, 216, 230, 150);
    beginShape();
      for (let pt of points) {
        vertex(pt[0], pt[1]);
      }
    endShape(CLOSE);
    
    // Draw vertices and label them with thin, neat (small) fonts.
    noStroke();
    fill(0);
    for (let i = 0; i < points.length; i++) {
      let [x, y] = points[i];
      // Draw a small circle at the vertex.
      ellipse(x, y, 5 / scaleFactor, 5 / scaleFactor);
      
      push();
        translate(x, y);
        // Flip back the y-axis for correct text orientation.
        scale(1, -1);
        textFont("Arial");
        textStyle(NORMAL);
        textSize(8);
        textAlign(CENTER, BOTTOM);
        text(labels[i], 0, -3 / scaleFactor);
      pop();
    }
  pop();
  
  // --- Draw dimension lines on each edge ---
  // (Dimension lines are drawn in screen coordinates for crisp rendering.)
  for (let i = 0; i < points.length; i++) {
    let p1 = createVector(points[i][0], points[i][1]);
    let p2 = createVector(points[(i + 1) % points.length][0], points[(i + 1) % points.length][1]);
    let d = p5.Vector.dist(p1, p2); // Edge length in meters.
    
    // Compute the edge midpoint (logical coordinates).
    let mid = p5.Vector.add(p1, p2).mult(0.5);
    
    // Compute a candidate normal (perpendicular) vector.
    let edgeDir = p5.Vector.sub(p2, p1);
    let candidateNormal = createVector(-edgeDir.y, edgeDir.x);
    candidateNormal.normalize();
    
    // Ensure the normal points outward from the polygon.
    let toCentroid = p5.Vector.sub(centroid, mid);
    if (candidateNormal.dot(toCentroid) > 0) {
      candidateNormal.mult(-1);
    }
    
    // Create an offset vector (logical coordinates) for the dimension line.
    let offset = p5.Vector.mult(candidateNormal, offsetVal);
    
    // Calculate the endpoints of the dimension line (logical coordinates).
    let p1Dim = p5.Vector.add(p1, offset);
    let p2Dim = p5.Vector.add(p2, offset);
    
    // Convert these endpoints to screen coordinates.
    let p1Screen = toScreen(p1Dim, scaleFactor);
    let p2Screen = toScreen(p2Dim, scaleFactor);
    
    // Draw the dimension line (thin and neat).
    stroke(0);
    strokeWeight(1);
    line(p1Screen.x, p1Screen.y, p2Screen.x, p2Screen.y);
    
    // Draw arrowheads at both ends of the dimension line.
    let dimDir = p5.Vector.sub(p2Screen, p1Screen);
    dimDir.normalize();
    drawArrowHead(p1Screen, dimDir, arrowHeadLength, arrowHeadWidth);
    drawArrowHead(p2Screen, p5.Vector.mult(dimDir, -1), arrowHeadLength, arrowHeadWidth);
    
    // Draw the dimension text (edge length) near the midpoint of the dimension line.
    let dimMid = p5.Vector.add(p1Screen, p2Screen).mult(0.5);
    push();
      textFont("Arial");
      textStyle(NORMAL);
      textSize(12);
      textAlign(CENTER, CENTER);
      text(nfc(d, 1, 1) + " m", dimMid.x, dimMid.y - 15);
    pop();
  }
  
  // --- Draw the area information ---
  fill(255, 0, 0);
  noStroke();
  textFont("Arial");
  textStyle(NORMAL);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Area: " + nfc(areaSqM, 2) + " m²", 20, 20);
  text(" = " + nfc(areaCents, 2) + " cents", 20, 40);
}

// --- Utility functions ---

// Converts a point from logical coordinates to screen coordinates.
function toScreen(pt, scaleFactor) {
  // Conversion:
  // x_screen = width/2 + pt.x * scaleFactor
  // y_screen = height/2 - pt.y * scaleFactor
  return createVector(width / 2 + pt.x * scaleFactor, height / 2 - pt.y * scaleFactor);
}

// Draws an arrowhead as a filled triangle at a given point on the screen.
// 'pt' is the tip location, and 'dir' is a normalized direction vector.
function drawArrowHead(pt, dir, arrowHeadLength, arrowHeadWidth) {
  let base = p5.Vector.sub(pt, p5.Vector.mult(dir, arrowHeadLength));
  let perp = createVector(-dir.y, dir.x);
  perp.setMag(arrowHeadWidth / 2);
  
  let corner1 = p5.Vector.add(base, perp);
  let corner2 = p5.Vector.sub(base, perp);
  
  fill(0);
  noStroke();
  triangle(pt.x, pt.y, corner1.x, corner1.y, corner2.x, corner2.y);
}

// Computes the polygon area using the shoelace formula.
function polygonArea(pts) {
  let area = 0;
  for (let i = 0; i < pts.length; i++) {
    let [x1, y1] = pts[i];
    let [x2, y2] = pts[(i + 1) % pts.length];
    area += (x1 * y2 - x2 * y1);
  }
  return abs(area) / 2;
}











